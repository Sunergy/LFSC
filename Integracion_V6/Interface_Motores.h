//*****************************************************************************
// Copyright (c) 2014 Texas Instruments Incorporated.  All rights reserved.
// Software License Agreement
// 
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions
//   are met:
// 
//   Redistributions of source code must retain the above copyright
//   notice, this list of conditions and the following disclaimer.
// 
//   Redistributions in binary form must reproduce the above copyright
//   notice, this list of conditions and the following disclaimer in the
//   documentation and/or other materials provided with the  
//   distribution.
// 
//   Neither the name of Texas Instruments Incorporated nor the names of
//   its contributors may be used to endorse or promote products derived
//   from this software without specific prior written permission.
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// This file was automatically generated by the Tiva C Series PinMux Utility
// Version: 1.0.4
//
//*****************************************************************************

#ifndef __INTERFACE_MOTORES_H__
#define __INTERFACE_MOTORES_H__

typedef struct  {
	unsigned int index;// next secuence for the motor
	uint8_t mask;// position of the motor in the port 0xF0 if ports 7654 or 0x0F if 3210
	volatile uint32_t* Motor_Port;// base address port for the motor
	int Potenciometer;// the index of the coresponding adc output secuence
	int center;// the center quantization of the motor
	float err;

}motor;
// anadir set to center potenciometer
extern void ConfigureMotors(void);
extern void SetMotor(int motor,float angle);// motor is the number of the potor and angle is the target angle
extern void SetMotorHS(int motor ,int steps);
extern void SetMotorFS(int motor,int steps);
extern void SetMotorCenter(int motor);
extern void SetPotenciometerToCenter(int motor);
// set pot to center
extern float getMotorAngle(int motor);
extern int getQuantizer(int motor);
extern int getNormalizedQuantizer(int motor);
extern float getVoltage(int motor);
extern float getAngleDiff(int motor,float angle);
extern int getDeltaStepsHS(int motor,float angle);
extern int getDeltaStepsFS(int motor,float angle);


#endif //  __INTERFACE_MOTORES_H__
